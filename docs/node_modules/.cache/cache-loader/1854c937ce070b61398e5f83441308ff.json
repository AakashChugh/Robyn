{"remainingRequest":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn-master/docs/docs/doc12.md","dependencies":[{"path":"/Users/leonelsentana/Robyn-master/docs/docs/doc12.md","mtime":1604601580937},{"path":"/Users/leonelsentana/Robyn-master/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-12-md-009.json","mtime":1604654926240},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/cache-loader/dist/cjs.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1604583336000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}