{"remainingRequest":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn-master/docs/docs/doc13.md","dependencies":[{"path":"/Users/leonelsentana/Robyn-master/docs/docs/doc13.md","mtime":1604601176015},{"path":"/Users/leonelsentana/Robyn-master/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-13-md-221.json","mtime":1604655238913},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/cache-loader/dist/cjs.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1604583336000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/leonelsentana/Robyn-master/docs/docs/doc13.md"],"names":["React","mdx","frontMatter","id","title","metadata","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","useBaseUrl","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'doc13',\n\ttitle: 'Step-by-step guide'\n};\nexport const metadata = {\n  \"unversionedId\": \"doc13\",\n  \"id\": \"doc13\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Step-by-step guide\",\n  \"description\": \"Load data & scripts\",\n  \"source\": \"@site/docs/doc13.md\",\n  \"permalink\": \"/Robyn/docs/doc13\",\n  \"editUrl\": \"https://github.com/facebookexperimental/Robyn/docs/doc13.md\"\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'Load data &amp; scripts',\n  id: 'load-data--scripts',\n  children: []\n}, {\n  value: 'Set model input variables',\n  id: 'set-model-input-variables',\n  children: [{\n    value: 'set_country',\n    id: 'set_country',\n    children: []\n  }, {\n    value: 'set_dateVarName',\n    id: 'set_datevarname',\n    children: []\n  }, {\n    value: 'set_depVarName and set_depVarType',\n    id: 'set_depvarname-and-set_depvartype',\n    children: []\n  }, {\n    value: 'Set Prophet variables',\n    id: 'set-prophet-variables',\n    children: []\n  }, {\n    value: 'Set Baseline variables',\n    id: 'set-baseline-variables',\n    children: []\n  }, {\n    value: 'set_mediaVarName and set_mediaSpendName',\n    id: 'set_mediavarname-and-set_mediaspendname',\n    children: []\n  }, {\n    value: 'Set factor variables',\n    id: 'set-factor-variables',\n    children: []\n  }]\n}, {\n  value: 'Set global model parameters',\n  id: 'set-global-model-parameters',\n  children: []\n}, {\n  value: 'Tune channel hyperparameters bounds',\n  id: 'tune-channel-hyperparameters-bounds',\n  children: []\n}, {\n  value: 'Plotting and understanding results',\n  id: 'plotting-and-understanding-results',\n  children: [{\n    value: 'f.plotSpendModel: Plotting the spend-reach fitting with Michaelis-Menten model',\n    id: 'fplotspendmodel-plotting-the-spend-reach-fitting-with-michaelis-menten-model',\n    children: []\n  }, {\n    value: 'f.plotHyperSamp: checking latin hypercube sampling distribution',\n    id: 'fplothypersamp-checking-latin-hypercube-sampling-distribution',\n    children: []\n  }, {\n    value: 'f.plotTrendSeason: Understanding trend and seasonality',\n    id: 'fplottrendseason-understanding-trend-and-seasonality',\n    children: []\n  }, {\n    value: 'bestAdstock: Adstock carryover and diminishing returns effects',\n    id: 'bestadstock-adstock-carryover-and-diminishing-returns-effects',\n    children: []\n  }, {\n    value: 'f.plotBestDecomp: Understanding the effect of baseline, media variables trend and seasonality along time',\n    id: 'fplotbestdecomp-understanding-the-effect-of-baseline-media-variables-trend-and-seasonality-along-time',\n    children: []\n  }, {\n    value: 'f.plotMAPEConverge: Understanding MAPE evolution per Random Search iteration and minutes spent',\n    id: 'fplotmapeconverge-understanding-mape-evolution-per-random-search-iteration-and-minutes-spent',\n    children: []\n  }, {\n    value: 'f.plotBestModDiagnostic: plot best model diagnostics: residual vs fitted, QQ plot and residual vs. actual',\n    id: 'fplotbestmoddiagnostic-plot-best-model-diagnostics-residual-vs-fitted-qq-plot-and-residual-vs-actual',\n    children: []\n  }, {\n    value: 'f.plotChannelROI: Understanding performance with spend and return of investment charts',\n    id: 'fplotchannelroi-understanding-performance-with-spend-and-return-of-investment-charts',\n    children: []\n  }, {\n    value: 'f.plotHypConverge: Correlation and convergence of hyperparameters and MAPE (Mean Absolute Percentage Error)',\n    id: 'fplothypconverge-correlation-and-convergence-of-hyperparameters-and-mape-mean-absolute-percentage-error',\n    children: []\n  }, {\n    value: 'f.plotHyperBoundOptim: Improved plot for convergence of hyperparameters and MAPE (Mean Absolute Percentage Error)',\n    id: 'fplothyperboundoptim-improved-plot-for-convergence-of-hyperparameters-and-mape-mean-absolute-percentage-error',\n    children: []\n  }]\n}, {\n  value: 'Using the optimiser',\n  id: 'using-the-optimiser',\n  children: []\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"load-data--scripts\"\n    }}>{`Load data & scripts`}</h2>\n    <p>{`The first step is to load data and scripts, you can start with our simulated data file (de_simulated_data.csv) if you want to practice at the beginning.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`script_path <- str_sub(rstudioapi::getActiveDocumentContext()$path, start = 1, end = max(unlist(str_locate_all(rstudioapi::getActiveDocumentContext()$path, \"/\"))))\ndt_input <- fread(paste0(script_path,'de_simulated_data.csv'))\nholidays <- fread(paste0(script_path,'generated_holidays.csv'))\n`}</code></pre>\n    <p>{`Our script has been designed to pull files automatically from the folder where the ‘fb_nextgen_mmm.exec.R’ script resides. If you would like to use a new data input file instead of our simulated data you will need to save it in the same folder and replace dt_input.csv file as in the example below:\nBefore\ndt_input <- fread(paste0(script_path,'de_simulated_data.csv'))\nAfter\ndt_input <- fread(paste0(script_path,'your_input_data_file.csv'))`}</p>\n    <h2 {...{\n      \"id\": \"set-model-input-variables\"\n    }}>{`Set model input variables`}</h2>\n    <p>{`Once you have defined the input files to work with and loaded to the source all the functions needed to run the code. You will need to define and set the input variables.`}</p>\n    <h3 {...{\n      \"id\": \"set_country\"\n    }}>{`set_country`}</h3>\n    <p>{`The first variable to declare is the country. We recommend using only one country especially if you are planning to leverage prophet for trend and seasonality which automatically pulls holidays for the country you have selected and simplifies the process.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_country <- \"DE\" # only one country allowed. Used in prophet holidays\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set_datevarname\"\n    }}>{`set_dateVarName`}</h3>\n    <p>{`For date variables you must have in mind that the DATE column in your dataset has to be in  \"yyyy-mm-dd \" format. ie. \"2020-01-01\"`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_dateVarName <- c(\"DATE\") # date must be format \"2020-01-01\"\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set_depvarname-and-set_depvartype\"\n    }}>{`set_depVarName and set_depVarType`}</h3>\n    <p>{`Setting the dependent variable is basically the outcome you are trying to measure. We only accept one dependent variable under set_depVarName. This variable can take the form of revenue (Sales or profit in monetary values) or conversion (Number of transactions, units sold) which you will indicate when defining the set_depVarType variable.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_depVarName <- c(\"revenue\") # there should be only one dependent variable\nset_depVarType <- \"revenue\" # \"revenue\" or \"conversion\" are allowed\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set-prophet-variables\"\n    }}>{`Set Prophet variables`}</h3>\n    <h4 {...{\n      \"id\": \"activate_prophet\"\n    }}>{`activate_prophet`}</h4>\n    <p>{`First you will need to indicate the model if you would like to turn on or off the Prophet feature in the code to be used for seasonality, trend and holidays. T (True) means it is activated and F (False) deactivated:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`activate_prophet <- T\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"set_prophet\"\n    }}>{`set_prophet`}</h4>\n    <p>{`The next step is to select which of the provided outcomes of Prophet you will use in the model. It is recommended to at least keep trend and holidays. Please have in mind that \"trend\",\"season\", \"weekday\", \"holiday\" are provided and case-sensitive.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_prophet <- c(\"trend\", \"season\", \"holiday\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"set_prophetvarsign\"\n    }}>{`set_prophetVarSign`}</h4>\n    <p>{`You may define the variable sign control for prophet variables to be \"default\", \"positive\", or \"negative\". If you are expecting coefficients for prophet variables such as \"trend\", \"season\", \"holiday\" to be default (either positive or negative), positive or negative. We recommend using default. Please remember the object declared must be same length as set_prophet’s`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_prophetVarSign <- c(\"default\",\"default\", \"default\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"test-and-visualise-prophets-decomposition\"\n    }}>{`Test and visualise prophet’s decomposition`}</h4>\n    <p>{`You may drill-down into prophet results to understand better the outcomes provided by the tool by executing the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`f.getProphet(dt_input)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set-baseline-variables\"\n    }}>{`Set Baseline variables`}</h3>\n    <p>{`The following step is to set the baseline variables which typically are things like competitors, pricing, promotions, temperature, unemployment rate and any other variable that is not media exposure but has a strong relationship with sales outcomes. You will need to indicate the model if you would like to turn on or off baseline variables in the code. T (True) means it is activated and F (False) deactivated:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`activate_baseline <- T\n`}</code></pre>\n    <p>{`You may then define the different baseline variables you would like to consider:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_baseVarName <- c(\"promotions\", \"price changes\", \"competitors sales\")\n`}</code></pre>\n    <p>{`You may apply sign control for baseline variables to be \"default\", \"positive\", or \"negative\". If you are expecting coefficients for baseline variables such as \"promotions\", \"price changes\", \"competitors sales\" to be default (either positive or negative), positive or negative depending on its expected relationship with the dependent variable. For example, rainy weather may have a positive or negative impact in sales depending on the business. Please remember the object declared must be same length as set_baseVarName’s`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_baseVarSign <- c(\"negative\") # c(\"default\", \"positive\", and \"negative\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set_mediavarname-and-set_mediaspendname\"\n    }}>{`set_mediaVarName and set_mediaSpendName`}</h3>\n    <p>{`There is one key restriction to have in mind here, you must have spend variables declared for every media channel you would like to measure. So they have to be in the same order and same length as set_mediaVarName variables.`}</p>\n    <p>{`Correct`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mediaVarName <- c(\"tv_S\"    ,\"ooh_S\",   \"print_S\"   ,\"facebook_I\"   ,\"search_clicks_P\")\n\nset_mediaSpendName <- c(\"tv_S\"  ,\"ooh_S\",   \"print_S\"   ,\"facebook_S\"   ,\"search_S\")\n`}</code></pre>\n    <p>{`Incorrect`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mediaVarName <- c(\"tv_S\"    ,\"ooh_S\",   \"print_S\"   ,\"facebook_I\"   ,\"search_clicks_P\")\n\nset_mediaSpendName <- c(\"tv_S\"  ,\"ooh_S\",   \"print_S\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"set_mediavarsign\"\n    }}>{`set_mediaVarSign`}</h4>\n    <p>{`You may apply sign control for media variables to be \"default\", \"positive\", or \"negative\". If you are expecting coefficients for baseline variables such as \"tv\", \"print\", \"facebook\" to be default (either positive or negative), positive or negative depending on its expected relationship with the dependent variable. We recommend using positive for all. Please remember the object declared must be same length as set_mediaVarName’s`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mediaVarSign <- c(\"positive\", \"positive\", \"positive\", \"positive\", \"positive\")\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set-factor-variables\"\n    }}>{`Set factor variables`}</h3>\n    <p>{`If any variable above should be factor please include it in this section of the code, otherwise leave it empty as by default “c()”`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_factorVarName <- c()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-global-model-parameters\"\n    }}>{`Set global model parameters`}</h2>\n    <p>{`In this section you will have to define parameters values and bounds for the model to start working:\nThe `}<strong parentName=\"p\">{`number of cores`}</strong>{` in your computer to be used for `}<strong parentName=\"p\">{`parallel computing`}</strong>{`\nThe `}<strong parentName=\"p\">{`data training size`}</strong>{` (set_modTrainSize) which will indicate the percentage of data to be used to train the model, therefore, the percentage left (1- training size) to validate the model.\nThe function f.plotTrainSize helps you select the best split. Set the function to f.plotTrainSize(TRUE) to plot the Bhattacharyya coefficient, an indicator for the similarity of two distributions, for the training size 50-90%. The higher the Bhatta coefficient, the more similar the train and test data splits and thus the better the potential model fit in the end.\nThis is just example plot for you to see.\nThe adstocking method which can be `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Geometric_distribution\"\n      }}>{`Geometric`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Weibull_distribution\"\n      }}>{`Weibull`}</a>{` distributions.\nThe `}<strong parentName=\"p\">{`number of iterations`}</strong>{` (set_iter) your model will have to find optimum values for coefficients.\nThe hyperparameters bounds which we recommend to leave as default but can be changed according to learnings from model iterations and analysts’ past experience.\nThe definition of each hyperparameter:\n`}<strong parentName=\"p\">{`Thetas`}</strong>{`: Geometric function decay rate\n`}<strong parentName=\"p\">{`Shapes`}</strong>{`: Weibull parameter that controls the decay shape between exponential and s-shape\n`}<strong parentName=\"p\">{`Scales`}</strong>{`: Weibull parameter that controls the position of inflection point\n`}<strong parentName=\"p\">{`Alphas`}</strong>{`: Hill function (Diminishing returns) parameter that controls the shape between exponential and s-shape.\n`}<strong parentName=\"p\">{`Gammas`}</strong>{`: Hill function (Diminishing returns) parameter that controls the scale of transformation\n`}<strong parentName=\"p\">{`Lambdas`}</strong>{`: Regularization penalty parameter for ridge regression\nUnderstanding how adstock affects media transformation:\nIn order to make more informed decisions to define hyperparameter values, it’s very helpful to know which hyperparameter is doing what during the media transformation. The plot function f.plotAdstockCurves helps you understand exactly that.\nBelow is the geometric adstock that is a one parameter (theta) function. Assume the time unit is week, then we can see that when theta=0.9, meaning 90% of the media effect this week carries over to the next week, the halflife enters after 8 weeks (halflife value in legend). In other words, it takes 8 weeks until the media effect decays to half when theta=0.9. This should help you having a more tangible feeling about if the theta value for this certain channel makes normal sense.`}</p>\n    <img alt=\"Model chart\" src={useBaseUrl('/img/adstockintro.png')} />\n    <p>{`Similar to above, this plot visualises the two-parameter (scale & shape) Weibull function. The upper plot shows changes in scale while keeping shape constant. We can observe that the larger the scale, the later the inflexion point. When scale=0.5 and shape = 2, it takes 18 weeks until the media effect decays to half (see legend). The lower plot shows changes in shape while keeping scale constant. When shape is smaller, the curve  rather takes on the L-shape. When shape is larger, the curve rather takes on S-shape.`}</p>\n    <img alt=\"Model chart\" src={useBaseUrl('/img/adstockintro2.png')} />\n    <p>{`In order to start setting model parameters we recommend to start with the Geometric function:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`## set model core features\nadstock <- \"geometric\"\n`}</code></pre>\n    <p>{`This function is simpler, therefore easier to understand compared to weibull.  You may start by focusing on Thetas’ bounds, which control for the decay rate any channel could take. If you are not sure about decay rates for your channels, we suggest you start with a range: thetas = c(0, 0.5) which will be accepting a decay rate of up to 0.5 for the next unit of time in your dataset. ie. In a week by week dataset, we would be expecting a maximum carryover effect of 50% of previous week’s values to be extended and added to the following week’s values for the dependent variable (Sales, impressions, etc.)`}</p>\n    <p>{`Once you run one of the iterations you may notice theta's values and if certain optimums have been found by looking into variables including 'thetas' on their names and identifying the number of times an optimum was found (epoch.optim).`}</p>\n    <img alt=\"Model charts\" src={useBaseUrl('/img/coderesults1.png')} />\n    <p>{`In the example above, you will see that Facebook and TV thetas are still missing an optimum given that optim.found column has still TRUE values on it, for this we suggest to increase epoch number to Inf (Infinity) until an optimum is found.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`model_output <- f.mmmRobyn(set_hyperBoundGlobal\n                          ,set_iter = set_iter\n                          ,set_cores = set_cores\n                          ,epochN = Inf # set to Inf to auto-optimise until no optimum found\n                          ,optim.sensitivity = 0 # must be from -1 to 1. Higher sensitivity means finding optimum easier\n                          ,temp.csv.path = '/Users/leonelsentana/Documents/mmm.tempout.csv' # output optimisation result for each epoch. Use getwd() to find path\n                          )\n`}</code></pre>\n    <p>{`Below an example reaching optimum in 33 epochs:`}</p>\n    <img alt=\"Model charts\" src={useBaseUrl('/img/coderesults2.png')} />\n    <p>{`You may note all parameters state FALSE which means there are not any more optimums to find. This indicates that the values found are optimal, and that if wanted, you could use some of these mode values to fix hyperparameter values in the tune channel hyperparameters bounds section below.`}</p>\n    <h2 {...{\n      \"id\": \"tune-channel-hyperparameters-bounds\"\n    }}>{`Tune channel hyperparameters bounds`}</h2>\n    <p>{`For that you will need to set the following command to 'TRUE':`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`activate_hyperBoundLocalTuning <- T\n`}</code></pre>\n    <p>{`This command will enable you to define the bounds each media’s parameter should have manually. Please uncomment the following section of the code and define the values, each bound can be either a range (e.g c(0.1,0.9)) or one fixed value:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{` set_hyperBoundLocal <- list(\n   facebook_I_alphas = c(0.8356271, 0.8371774)\n   ,facebook_I_gammas = c(0.8991811, 0.9012183)\n   ,facebook_I_thetas = c(0.8700282)\n   ,ooh_S_alphas = c(0.8348503)\n   ,ooh_S_gammas = c(0.3565417)\n   ,ooh_S_thetas = c(0.3815053)\n   ,print_S_alphas = c(0.6490568)\n   ,print_S_gammas = c(0.1165910, 0.1171953)\n   ,print_S_thetas = c(0.7617390)\n   ,tv_S_alphas = c(2.4880460)\n   ,tv_S_gammas = c(0.8867124)\n   ,tv_S_thetas = c(0.1477954, 0.1478531)\n   ,search_clicks_P_alphas = c(0.1360708)\n   ,search_clicks_P_gammas = c(0.4177802)\n   ,search_clicks_P_thetas = c(0.5784685)\n )\n`}</code></pre>\n    <p>{`The hyperparameters tuning section is especially handy when we know there is an expected behavior behind parameters e.g. adstocking for TV decay rate taking only a value within a range. In this case, we would recommend you to guide the model towards a solution that is both optimal and meets your needs based on experience from previous analyses.`}</p>\n    <img alt=\"Model chart\" src={useBaseUrl('/img/coderesults2.png')} />\n    <p>{`If we consider our previous example, it could be the case where you may want to tune Theta decay rates to control for the adstocking decay pacing of TV to `}<strong parentName=\"p\">{`tv_S_thetas = c(0.25, 0.35)`}</strong>{`. If we also fix other values where optimums have been reached, we would reach something like the example below with fix values and ranges based on previous iterations and past experience:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#Please uncomment set_hyperBoundLocal list completely and use scales and shapes only if you\n#have selected ‘adstock <- \"weibull\"’. If you selected adstock <- \"geometric\" as by default, then simply #use alphas, gammas and thetas for each channel.\n\n set_hyperBoundLocal <- list(\n   facebook_I_alphas = c(0.8356271, 0.8371774)\n   ,facebook_I_gammas = c(0.8991811, 0.9012183)\n   ,facebook_I_thetas = 0.8700282\n   ,ooh_S_alphas = 0.8348503\n   ,ooh_S_gammas = 0.3565417\n   ,ooh_S_thetas = 0.3815053\n   ,print_S_alphas = 0.6490568\n   ,print_S_gammas = c(0.1165910, 0.1171953)\n   ,print_S_thetas = 0.7617390\n   ,search_clicks_P_alphas = 0.1360708\n   ,search_clicks_P_gammas = 0.4177802\n   ,search_clicks_P_thetas = 0.5784685\n   ,tv_S_alphas = 2.4880460\n   ,tv_S_gammas = 0.8867124\n   ,tv_S_thetas = c(0.25, 0.35)\n )\n`}</code></pre>\n    <p>{`If we apply the above bounds to our media related variables, you may see that results now reach an optimum much faster, after only 2 epochs instead of 33. You may also observe that the new bounds for `}<strong parentName=\"p\">{`tv_S_thetas = c(0.25, 0.35)`}</strong>{` have been applied, therefore the new optimum found is 0.2706085 instead of the 0.1478256 from the previous example.`}</p>\n    <img alt=\"Model chart\" src={useBaseUrl('/img/coderesults3.png')} />\n    <h2 {...{\n      \"id\": \"plotting-and-understanding-results\"\n    }}>{`Plotting and understanding results`}</h2>\n    <p>{`The first thing you will have to do is to set every plot you would like to be drawn to TRUE (T).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### Plot section\n\n## insert TRUE into plot functions to plot\nf.plotSpendModel(F)\nf.plotHyperSamp(F, channelPlot = set_mediaVarName) # plot latin hypercube hyperparameter sampling balance. Max. 3 channels per plot\nf.plotTrendSeason(F) # plot prophet trend, season and holiday decomposition\nbestAdstock <- f.plotMediaTransform(T, channelPlot = set_mediaVarName) # plot best model media transformation with 3 plots: adstock decay rate, adstock effect & response curve. Max. 3 channels per plot\nf.plotBestDecomp(F) # plot best model decomposition with 3 plots: sales decomp, actual vs fitted over time, & sales decomp area plot\nf.plotMAPEConverge(F) # plot RS MAPE convergence, only for random search\nf.plotBestModDiagnostic(F) # plot best model diagnostics: residual vs fitted, QQ plot and residual vs. actual\nf.plotChannelROI(F)\nf.plotHypConverge(F, channelPlot = set_mediaVarName) # plot hyperparameter vs MAPE convergence. Max. 3 channels per plot\nboundOptim <- f.plotHyperBoundOptim(F, channelPlot = set_mediaVarName, model_output, kurt.tuner = optim.sensitivity)  # improved hyperparameter plot to better visualise trends in each hyperparameter\n`}</code></pre>\n    <p>{`After that, you may execute each plot separately and analyze it.`}</p>\n    <h3 {...{\n      \"id\": \"fplotspendmodel-plotting-the-spend-reach-fitting-with-michaelis-menten-model\"\n    }}>{`f.plotSpendModel: Plotting the spend-reach fitting with Michaelis-Menten model`}</h3>\n    <p>{`The plot below illustrates how to better translate the relationship between spend and reach so that you can apply it to performance ROI (Revenue/spend) calculations. It is possible to choose reach variables (GRP, impressions, actual reach, etc.) in the model. Understanding that relationship can help with the translation of reach to spend and vice versa.\nLM (Linear Model) and NLS (Non-linear least squares) comparison shows why it is better to use a non-linear model, which is the technique applied in the code. The linear model is actually as primitive as just using average to scale, because in our case the intercept is omitted given that we assume no spend involves no reach. Whereas NLS are more flexible and should adapt better to the underlying correlation patterns between both variables.`}</p>\n    <img alt=\"plotSpendModel chart\" src={useBaseUrl('/img/plotSpendModel.png')} />\n    <h3 {...{\n      \"id\": \"fplothypersamp-checking-latin-hypercube-sampling-distribution\"\n    }}>{`f.plotHyperSamp: checking latin hypercube sampling distribution`}</h3>\n    <p>{`The overall idea of these charts is to validate the `}<strong parentName=\"p\"><em parentName=\"strong\">{`Latin hypercube sampling (LHS)`}</em></strong>{`, which is a statistical method for generating a near-random sample of parameter values from the multidimensional distribution of hyperparameters. It consists of two main charts:`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Latin Hypercube Sampling distribution:`}</em></strong>{` The key aspect is to concentrate on the randomness of the points on this chart. If all dots seem to cover evenly the space as in the example below, then sampling is ok. However, beware of high concentrations of dots or clear areas without any dots which may mean you will have to increase the sampling to have a better representation of the hyperspace.\n`}<strong parentName=\"p\"><em parentName=\"strong\">{`Latin Hypercube Sampling distribution transformed:`}</em></strong>{` This is a half violin chart that represents the distribution of each media parameter values. It helps you understand the actual range of values that each parameter is taking in order to represent uniformly the hyperparameter space. It will also depend on the set_hyperBoundGlobal variable and its bound definitions.`}</p>\n    <img alt=\"plotHyperSamp chart\" src={useBaseUrl('/img/plotHyperSamp.png')} />\n    <h3 {...{\n      \"id\": \"fplottrendseason-understanding-trend-and-seasonality\"\n    }}>{`f.plotTrendSeason: Understanding trend and seasonality`}</h3>\n    <p>{`This plot describes the trend, holidays and seasonality along the analyzed period.\nThe `}<strong parentName=\"p\"><em parentName=\"strong\">{`trend`}</em></strong>{` is the component of a time series that represents low frequency variations in time. It reflects the underlying tendency behind the dependent variable which can reflect growth, stability or shrinkage depending on the time unit analyzed.\n`}<strong parentName=\"p\"><em parentName=\"strong\">{`Holidays`}</em></strong>{` are basically days defined by governments where people commemorate events which can affect consumption behaviors. Some holidays may have more impact than others, therefore the different magnitudes on the chart.\n`}<strong parentName=\"p\"><em parentName=\"strong\">{`Seasonality`}</em></strong>{` is a characteristic of a time series in which the time series experiences regular and predictable changes that recur every calendar year. Any predictable fluctuation or pattern that recurs or repeats over a one-year period is said to be seasonal. Below we have the yearly seasonality as an example, which shows higher demand between October and December, and lower demand between April and July.`}</p>\n    <img alt=\"plotTrendSeason chart\" src={useBaseUrl('/img/plotTrendSeason.png')} />\n    <h3 {...{\n      \"id\": \"bestadstock-adstock-carryover-and-diminishing-returns-effects\"\n    }}>{`bestAdstock: Adstock carryover and diminishing returns effects`}</h3>\n    <p>{`This plot represents the relationship between spend or ROI, and the response variable (Sales, conversions, etc.).\nOn the first line of charts you will find:\nThe response curve which can be S or C like, its scale of growth and diminishing returns pace.\nThe profit curve which illustrates the difference between the Y and X axes (Response-profit). The higher this curve is on the Y axis, the closer to a max profit point you will get.\nThe second line of charts displays the relationship between ROI and spend, the higher the curve on the Y axis, the greater the response obtained. Maximum and Average ROI are drawn for an easier read.`}</p>\n    <p>{`Note: This plot admits only 3 channels at a time. Please select the 3 channels you would like to analyze as in the example below where first we look at channel names, and second, we indicate which names within set_mediaVarName object to plot c(1,2,5) :`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mediaVarName\nbestAdstock <- f.plotMediaTransform(T, channelPlot = set_mediaVarName[c(1,2,5)])\n`}</code></pre>\n    <img alt=\"bestAdstock chart\" src={useBaseUrl('/img/bestAdstock.png')} />\n    <h3 {...{\n      \"id\": \"fplotbestdecomp-understanding-the-effect-of-baseline-media-variables-trend-and-seasonality-along-time\"\n    }}>{`f.plotBestDecomp: Understanding the effect of baseline, media variables trend and seasonality along time`}</h3>\n    <p>{`The aim of this chart is to display the breakdown of the response variable through time and the relationship with each of its regressing components. As with all marketing mix models, both media and non-media related explanatory factors are displayed, including baseline effects such as price and promotions, as well as, trend , seasonality and holidays. In order to be able to make a proper description and forecast of performance, we must know to what extent each component is present in the data.`}</p>\n    <img alt=\"plotBestDecomp chart\" src={useBaseUrl('/img/plotBestDecomp.png')} />\n    <p>{`The chart below illustrates the contribution of each regressor variable to the overall response (Sales in this case) You may find for example that Facebook impressions had a 7.6% contribution to overall sales which represent in total $28.8 million.`}</p>\n    <img alt=\"bestDecomp2 chart\" src={useBaseUrl('/img/bestDecomp2.png')} />\n    <p>{`The next chart shows the difference between real and predicted values. The closer the lines for y and y_pred, the better. You may also find RSQ and MAPE metrics. RSQ or R-squared (R2) is a statistical measure that represents the proportion of the variance for a dependent variable that is explained by an independent variable or variables in a regression model. In general terms, the closer to one, the better.  Whereas, the mean absolute percentage error (MAPE) is the mean or average of the absolute percentage errors of forecasts. Error is defined as actual or observed value minus the forecasted value. As a general rule, the closer to zero the better.`}</p>\n    <img alt=\"bestDecomp3 chart\" src={useBaseUrl('/img/bestDecomp3.png')} />\n    <h3 {...{\n      \"id\": \"fplotmapeconverge-understanding-mape-evolution-per-random-search-iteration-and-minutes-spent\"\n    }}>{`f.plotMAPEConverge: Understanding MAPE evolution per Random Search iteration and minutes spent`}</h3>\n    <p>{`The chart below displays the evolution of the mean absolute percentage error (MAPE) with every minute spent on computing. This chart will help you understand how many random search iterations to include in the model under `}<strong parentName=\"p\"><em parentName=\"strong\">{`set_iter`}</em></strong>{` variable. If you increase set_iter from 100 to 10000, you will reach a point where MAPE will not decrease in time. Therefore, finding the optimum may be between 100 and 10000 may be your next step until you find the balance between computing time and MAPE reduction.`}</p>\n    <img alt=\"plotMAPEConverge chart\" src={useBaseUrl('/img/plotMAPEConverge.png')} />\n    <h3 {...{\n      \"id\": \"fplotbestmoddiagnostic-plot-best-model-diagnostics-residual-vs-fitted-qq-plot-and-residual-vs-actual\"\n    }}>{`f.plotBestModDiagnostic: plot best model diagnostics: residual vs fitted, QQ plot and residual vs. actual`}</h3>\n    <p>{`Across these plots we analyze residuals, which are the difference between the observed value of the dependent variable (y) and the predicted value (ŷ).`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Fitted vs. Residual:`}</em></strong>{` When conducting a residual analysis, a \"residuals versus fitted plot\" is the most frequently created plot. It is a scatter plot of residuals on the y axis and fitted values (estimated responses) on the x axis. The plot is used to detect non-linearity, unequal error variances, and outliers. The more random the pattern for the dots distribution in this plot and the more horizontal the smooth line, the better, as it would mean linearity, independent error variances and absence of outliers.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`QQ Plot:`}</em></strong>{` The quantile-quantile (q-q) plot is a graphical technique to determine if two data sets come from populations with a common distribution. A q-q plot is a plot of the quantiles of the first data set against the quantiles of the second data set in this case observed Y and Y_pred. A 45-degree reference line is also plotted. The closer the dots to the 45 degrees line, the better.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Observed vs. Residual:`}</em></strong>{` Compared to the Fitted vs. Residual plot, this plot shows more correlation between observed/true response vs. residuals when the model R2 is lower. Normally, a certain degree of correlation here means either the data is just noisy or there’s still missing patterns within the error. In the context of MMM, we would recommend to assume the latter one and look for potential additional predictors to also capture these patterns.\nWhen conducting a residual analysis, a \"residuals versus observed plot\" is commonly used as a complement of residual vs. fitted plots. It is a scatter plot of residuals on the y axis and observed values (Actual responses) on the x axis. The plot is used to detect non-linearity, unequal error variances, and outliers. The more uniform the dots distribution in this plot and the more horizontal the smooth line, the better as it would mean independent error variances and absence of outliers. The contrast between fitted and observed vs. residual charts helps to understand if there are common relationships between both and residuals.`}</p>\n    <img alt=\"plotBestModDiagnostic chart\" src={useBaseUrl('/img/f.plotBestModDiagnostic.png')} />\n    <h3 {...{\n      \"id\": \"fplotchannelroi-understanding-performance-with-spend-and-return-of-investment-charts\"\n    }}>{`f.plotChannelROI: Understanding performance with spend and return of investment charts`}</h3>\n    <p>{`The plot below reflects a simple comparison of ROI and Spend per channel. The greater the ROI (Return on investment) the better.`}</p>\n    <img alt=\"plotChannelROI chart\" src={useBaseUrl('/img/plotChannelROI.png')} />\n    <h3 {...{\n      \"id\": \"fplothypconverge-correlation-and-convergence-of-hyperparameters-and-mape-mean-absolute-percentage-error\"\n    }}>{`f.plotHypConverge: Correlation and convergence of hyperparameters and MAPE (Mean Absolute Percentage Error)`}</h3>\n    <p>{`The plot below describes the relationship between mean absolute percentage error (MAPE) and each hyperparameter range of values. It aims to assist you in finding the right Hyperparameters bounds that will help on MAPE reduction, its minimum values are indicated with a vertical line.`}</p>\n    <img alt=\"plotHypConverge chart\" src={useBaseUrl('/img/f.plotHypConverge.png')} />\n    <h3 {...{\n      \"id\": \"fplothyperboundoptim-improved-plot-for-convergence-of-hyperparameters-and-mape-mean-absolute-percentage-error\"\n    }}>{`f.plotHyperBoundOptim: Improved plot for convergence of hyperparameters and MAPE (Mean Absolute Percentage Error)`}</h3>\n    <p>{`Similar to the previous plot, this plot illustrates the relationship between mean absolute percentage error (MAPE) and each hyperparameter range of values via kurtosis distributions. It aims to assist you in finding the right Hyperparameters bounds that will help on MAPE reduction, its minimum values are indicated with a vertical line, in this case the mode. The mode can be taken as the most frequent value, therefore indicating, together with low and up vertical lines, the possible bounds to be adjusted on `}<strong parentName=\"p\"><em parentName=\"strong\">{`set_hyperBoundLocal`}</em></strong>{` variable`}</p>\n    <img alt=\"plotHyperBoundOptim chart\" src={useBaseUrl('/img/f.plotHyperBoundOptim.png')} />\n    <h2 {...{\n      \"id\": \"using-the-optimiser\"\n    }}>{`Using the optimiser`}</h2>\n    <p>{`Optimiser is also named scenario planner. It gives you the optimum media mix, meaning getting the most return out of a certain spend level, while holding true to a set of constraints.\nPlease note that the optimiser will only output reasonable optimisation when the MMM result makes sense, meaning all media channels have already found reasonable hyperparameters for adstocking and S-curving and the responses for each channel is meeting your expectations. Otherwise, the optimiser output is not interpretable.\nTechnically, the optimiser consumes the response curve (Hill function) for each channel provided by the MMM result and conducts the solver for nonlinear optimisation. The gradient-based algorithms (augmented Lagrangian / AUGLAG for global optimisation and Method of Moving Asymptotes / MMA for local optimization) are chosen to solve the nonlinear optimisation problem with equal and unequal constraints. For details see here.`}</p>\n    <p>{`Our current optimiser has two scenarios:\nmaximum historical response (max_hostorical_response): Assuming two years of data for five media channels is used to build the model. Total spend was 1MM € with 40/30/15/10/5 split for both channels and total return was 2MM€. The optimiser will output the optimum split for the historical spend level of 1MM€. For example, a maximum return of 2.5MM would be achieved with 35/25/20/12/8 split of the 1MM€ spent.  `}</p>\n    <img alt=\"plotHyperBoundOptim chart\" src={useBaseUrl('/img/optimiser1.png')} />\n    <p>{`Maximum response of expected spend (max_response_expected_soend): Compared to the above, this scenario outputs the optimum split of spend for a certain spend level, not the historical spend level. For example, if you have 100k€ for the next quarter, you would define expected_spend = 100000 and expected_spend_days = 90.`}</p>\n    <img alt=\"plotHyperBoundOptim chart\" src={useBaseUrl('/img/optimiser2.png')} />\n    <p>{`For both scenarios, you must also define the constraints (lower and upper bounds) for each channel with the parameter channel_constr_low and channel_constr_up. Assuming for channel A you’ve spent 10k€ per week on average, then channel_constr_low = 0.7 and channel_constr_up = 1.2 will not allow the optimiser to go lower than 7k€ or higher than 12k€ for channel A when running the optimisation.\nIn general, please use realistic scenarios and avoid putting too extreme values. The optimiser is still based on your historical performance. For example, if you put 10 times as much as your historical spend, the optimiser result might not be making sense.`}</p>\n    <p>{`The result would look like the following. Again, we want to address that the result of optimiser will only be interpretable if the MMM result makes sense.`}</p>\n    <img alt=\"plotHyperBoundOptim chart\" src={useBaseUrl('/img/optimiser3.png')} />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}