{"remainingRequest":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/Robyn-master/docs/docs/doc8.md","dependencies":[{"path":"/Users/leonelsentana/Robyn-master/docs/docs/doc8.md","mtime":1604587771027},{"path":"/Users/leonelsentana/Robyn-master/docs/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-8-md-7c5.json","mtime":1604655284106},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/cache-loader/dist/cjs.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/babel-loader/lib/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1604583336000},{"path":"/Users/leonelsentana/Robyn-master/docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1604583336000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2xlb25lbHNlbnRhbmEvUm9ieW4tbWFzdGVyL2RvY3Mvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXtpZDonZG9jOCcsdGl0bGU6J0NhbGlicmF0aW9uIHVzaW5nIGV4cGVyaW1lbnRhbCByZXN1bHRzJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImRvYzgiLCJpZCI6ImRvYzgiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiQ2FsaWJyYXRpb24gdXNpbmcgZXhwZXJpbWVudGFsIHJlc3VsdHMiLCJkZXNjcmlwdGlvbiI6IkNhbGlicmF0aW9uIGNvbmNlcHQiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2RvYzgubWQiLCJwZXJtYWxpbmsiOiIvUm9ieW4vZG9jcy9kb2M4IiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2V4cGVyaW1lbnRhbC9Sb2J5bi9kb2NzL2RvYzgubWQiLCJzaWRlYmFyIjoic29tZVNpZGViYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkF1dG9tYXRlZCBoeXBlcnBhcmFtZXRlciBzZWxlY3Rpb24gYW5kIG9wdGltaXphdGlvbiIsInBlcm1hbGluayI6Ii9Sb2J5bi9kb2NzL2RvYzcifSwibmV4dCI6eyJ0aXRsZSI6Ik91dHB1dHMgYW5kIGRpYWdub3N0aWNzIiwicGVybWFsaW5rIjoiL1JvYnluL2RvY3MvZG9jOSJ9fTsvKiBAanN4IG1keCAqL2ltcG9ydCB1c2VCYXNlVXJsIGZyb20nQGRvY3VzYXVydXMvdXNlQmFzZVVybCc7ZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J0NhbGlicmF0aW9uIGNvbmNlcHQnLGlkOidjYWxpYnJhdGlvbi1jb25jZXB0JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidDYWxpYnJhdGlvbiBpbiB0aGUgY29kZScsaWQ6J2NhbGlicmF0aW9uLWluLXRoZS1jb2RlJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJoMyIseyJpZCI6ImNhbGlicmF0aW9uLWNvbmNlcHQifSxgQ2FsaWJyYXRpb24gY29uY2VwdGApLG1keCgicCIsbnVsbCxgQnkgYXBwbHlpbmcgcmVzdWx0cyBmcm9tIHJhbmRvbWl6ZWQgY29udHJvbGxlZC1leHBlcmltZW50cywgeW91IG1heSBpbXByb3ZlIHRoZSBhY2N1cmFjeSBvZiB5b3VyIG1hcmtldGluZyBtaXggbW9kZWxzIGRyYW1hdGljYWxseS4gSXQgaXMgcmVjb21tZW5kZWQgdG8gcnVuIHRoZXNlIG9uIGEgcmVjdXJyZW50IGJhc2lzIHRvIGtlZXAgdGhlIG1vZGVsIGNhbGlicmF0ZWQgcGVybWFuZW50bHkuIEluIGdlbmVyYWwsIHdlIHdhbnQgdG8gY29tcGFyZSB0aGUgZXhwZXJpbWVudCByZXN1bHQgd2l0aCB0aGUgTU1NIGVzdGltYXRpb24gb2YgYSBtYXJrZXRpbmcgY2hhbm5lbC4gQ29uY2VwdHVhbGx5LCB0aGlzIG1ldGhvZCBpcyBsaWtlIGEgQmF5ZXNpYW4gbWV0aG9kLCBpbiB3aGljaCB3ZSB1c2UgZXhwZXJpbWVudCByZXN1bHRzIGFzIGEgcHJpb3IgdG8gc2hyaW5rIHRoZSBjb2VmZmljaWVudHMgb2YgbWVkaWEgdmFyaWFibGVzLiBBIGdvb2QgZXhhbXBsZSBvZiB0aGVzZSB0eXBlcyBvZiBleHBlcmltZW50cyBpcyBGYWNlYm9va+KAmXMgY29udmVyc2lvbiBsaWZ0IHRvb2wgd2hpY2ggY2FuIGhlbHAgZ3VpZGUgdGhlIG1vZGVsIHRvd2FyZHMgYSBzcGVjaWZpYyByYW5nZSBvZiBpbmNyZW1lbnRhbCB2YWx1ZXMuYCksbWR4KCJpbWciLHthbHQ6IkNhbGlicmF0aW9uIGNoYXJ0IixzcmM6dXNlQmFzZVVybCgnL2ltZy9jYWxpYnJhdGlvbjEucG5nJyl9KSxtZHgoInAiLG51bGwsYEZpZ3VyZSBpbGx1c3RyYXRlcyB0aGUgY2FsaWJyYXRpb24gcHJvY2VzcyBhYm92ZSBmb3Igb25lIE1NTSBjYW5kaWRhdGUgbW9kZWwuClRhYmxlIGJlbG93IGlsbHVzdHJhdGVzIHRoZSBtb2RlbCBzZWxlY3Rpb24gb3V0cHV0IGluY2x1ZGluZyBGQiBsaWZ0IGNhbGlicmF0aW9uIGVsZW1lbnQuIE1vZGVsZXJzIGNhbiBzZWxlY3QgdGhlIHRvcCBtb2RlbHMgd2l0aCByZWxhdGl2ZWx5IHNtYWxsIE1BUEUgbWV0cmljcyBhcyB0aGUgY2FuZGlkYXRlcyBmb3IgdGhlIGZpbmFsIG1vZGVsLiBJbiB0aGlzIGV4YW1wbGUsIHdlIHN1Z2dlc3QgcGlja2luZyBtb2RlbCB0d28sIGFzIGl0IGhhcyB0aGUgbWluaW11bSBgLG1keCgiZW0iLG51bGwsYE1BUEUoY2FsLGZiKWApLGAgYW5kIGl0cyBgLG1keCgiZW0iLG51bGwsYE1BUEUoaG9sZG91dClgKSxgIGlzIG9ubHkgMC40JSBtb3JlIHRoYW4gdGhlIG1pbmltdW0gb25lLmApLG1keCgiaDQiLHsiaWQiOiJleGFtcGxlLXRhYmxlIn0sYEV4YW1wbGUgVGFibGVgKSxtZHgoInAiLG51bGwsYFNhbXBsZSBvdXRwdXQgb2YgbW9kZWwgc2VsZWN0aW9uIG9mIGEgTU1NIHdpdGggb25seSB0d28gbWVkaWEgY2hhbm5lbHMsIFRWIGFuZCBTb2NpYWxgKSxtZHgoImltZyIse2FsdDoiQ2FsaWJyYXRpb24gdGFibGUiLHNyYzp1c2VCYXNlVXJsKCcvaW1nL2NhbGlicmF0aW9uMi5wbmcnKX0pLG1keCgicCIsbnVsbCxgTm90ZSB0aGF0IGAsbWR4KCJlbSIsbnVsbCxgTUFQRShjYWwsZmIpYCksYCB3aWxsIGxpa2VseSB2YXJ5IG1vcmUgd2lkZWx5IHRoYW4gYCxtZHgoImVtIixudWxsLGBNQVBFKGhvbGRvdXQpYCksYCAuIEdpdmVuIHRoaXMsIGNhbGlicmF0aW9uIGNhbiBpbXByb3ZlIHBlcmZvcm1hbmNlIHdpdGhvdXQgc3Vic3RhbnRpYWxseSBzYWNyaWZpY2luZyBiYWNrdGVzdGluZyBwZXJmb3JtYW5jZS4KVGhpcyBjYWxpYnJhdGlvbiBtZXRob2QgY2FuIGJlIGFwcGxpZWQgdG8gb3RoZXIgbWVkaWEgY2hhbm5lbHMgd2hpY2ggcnVuIGV4cGVyaW1lbnRzLCB0aGUgbW9yZSBjaGFubmVscyB0aGF0IGFyZSBjYWxpYnJhdGVkLCB0aGUgbW9yZSBhY2N1cmF0ZSB0aGUgTU1NIG1vZGVsLiBgLG1keCgiZW0iLG51bGwsYFlvdSBtYXkgZmluZCB0aGUgY2FsaWJyYXRpb24gZnVuY3Rpb24gaW4gdGhlIOKAmGZ1bmMuUuKAmSBzY3JpcHQuYCkpLG1keCgiaDMiLHsiaWQiOiJjYWxpYnJhdGlvbi1pbi10aGUtY29kZSJ9LGBDYWxpYnJhdGlvbiBpbiB0aGUgY29kZWApLG1keCgicCIsbnVsbCxgU28sIGhvdyBkbyB3ZSBhcHBseSB0aGlzIGluIG91ciBjb2RlP2ApLG1keCgib2wiLG51bGwsbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEZpcnN0LCB3ZSBjaGVjayBpZiBtZWRpYSBjaGFubmVscyB0byBiZSBjYWxpYnJhdGVkIGFjdHVhbGx5IGhhdmUgYSBtZWRpYSB2YXJpYWJsZSBjcmVhdGVkLmApLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBBZnRlciB0aGF0LCB3ZSBjb2xsZWN0IGFsbCBkaWZmZXJlbnQgbWVkaWEgdG8gYmUgY2FsaWJyYXRlZC4gQ29uc2VxdWVudGx5LCB3ZSBsb29wIG92ZXIgZWFjaCBsaWZ0IGNoYW5uZWwgKFdoZXJlIGZvciBlYWNoIG9mIHRoZW0gd2UgaXRlcmF0ZSBvdmVyIGFsbCBkaWZmZXJlbnQgc3R1ZGllcyBpZiBtb3JlIHRoYW4gb25lLCBkZXRlcm1pbmluZyB0aGUgZGF0ZSByYW5nZSBvZiBlYWNoIHN0dWR5KWApLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBJbiBhZGRpdGlvbiwgd2UgY29udmVydCBkYXRhIGZyb20gd2Vla3MgdG8gZGF5cyAoUGxlYXNlIG5vdGUgdGhlICo3IGluIHRoZSBmb3JtdWxhIGZvciBtbW1EYXlzLCB0aGlzIGlzIGFzc3VtaW5nIHlvdSB3aWxsIHVzZSB3ZWVrbHkgZGF0YSBhcyBhIGJhc2lzIGZvciB5b3VyIG1vZGVsKS5gKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSxgRmluYWxseSwgYW5kIG9uY2UgYm90aCBsaWZ0IHN0dWR5IGFuZCBNTU0gZGF0ZXMgYXJlIGJvdGggaW4gZGF5cywgd2Ugc2NhbGUgdGhlIHRvdGFsIGRlY29tcG9zZWQgbW9kZWwgcHJlZGljdGVkIHNhbGVzIGludG8gdGhlIGV4YWN0IG51bWJlciBvZiBkYXlzIHRoZSBsaWZ0IHN0dWR5IGhhZCB0byBiZSBjb21wYXJhYmxlIHdpdGggcHJldmlvdXNseSB1cGxvYWRlZCBsaWZ0QWJzIG51bWJlciB1bmRlciB0aGUgc2V0X2xpZnQgdmFyaWFibGUgKHJlbWVtYmVyIGxpZnRBYnMgdmFsdWVzIGluIHNldF9saWZ0IHZhcmlhYmxlIGhhdmUgdG8gYmUgYWJzb2x1dGUgYW5kIG1lYXN1cmluZyB0aGUgc2FtZSBtZXRyaWMgYXMgdGhlIG1vZGVsIGRvZXMgaWUuIHRvdGFsIGluY3JlbWVudGFsIHNhbGVzIHZzLiBtb2RlbCBwcmVkaWN0ZWQgc2FsZXMpYCkpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgIyMjIyBEZWZpbmUgbGlmdCBjYWxpYnJhdGlvbiBmdW5jdGlvbgpmLmNhbGlicmF0ZUxpZnQgPC0gZnVuY3Rpb24oZGVjb21wQ29sbGVjdCwgc2V0X2xpZnQpIHsKCiAgY2hlY2tfc2V0X2xpZnQgPC0gYW55KHNhcHBseShzZXRfbGlmdCRjaGFubmVsLCBmdW5jdGlvbih4KSBhbnkoc3RyX2RldGVjdCh4LCBzZXRfbWVkaWFWYXJOYW1lKSkpPT1GKSAjY2hlY2sgaWYgYW55IGxpZnQgY2hhbm5lbCBkb2Vzbid0IGhhdmUgbWVkaWEgdmFyCiAgaWYgKGNoZWNrX3NldF9saWZ0KSB7c3RvcCgic2V0X2xpZnQgY2hhbm5lbHMgbXVzdCBoYXZlIG1lZGlhIHZhcmlhYmxlIil9CiAgIyMgcHJlcCBsaWZ0IGlucHV0ICAKICBnZXRMaWZ0TWVkaWEgPC0gdW5pcXVlKHNldF9saWZ0JGNoYW5uZWwpCiAgZ2V0RGVjb21wVmVjIDwtIGRlY29tcENvbGxlY3QkeERlY29tcFZlYwoKICAjIyBsb29wIGFsbCBsaWZ0IGlucHV0CiAgbGlmdENvbGxlY3QgPC0gbGlzdCgpCiAgZm9yIChtIGluIDE6bGVuZ3RoKGdldExpZnRNZWRpYSkpIHsgIyBsb29wIHBlciBsaWZ0IGNoYW5uZWwKCiAgICBsaWZ0V2hpY2ggPC0gc3RyX3doaWNoKHNldF9saWZ0JGNoYW5uZWwsIGdldExpZnRNZWRpYVttXSkKCiAgICBsaWZ0Q29sbGVjdDIgPC0gbGlzdCgpCiAgICBmb3IgKGx3IGluIDE6bGVuZ3RoKGxpZnRXaGljaCkpIHsgIyBsb29wIHBlciBsaWZ0IHRlc3QgcGVyIGNoYW5uZWwKCiAgICAgICMjIGdldCBsaWZ0IHBlcmlvZCBzdWJzZXQKICAgICAgbGlmdFN0YXJ0IDwtIHNldF9saWZ0W2xpZnRXaGljaFtsd10sIGxpZnRTdGFydERhdGVdCiAgICAgIGxpZnRFbmQgPC0gc2V0X2xpZnRbbGlmdFdoaWNoW2x3XSwgbGlmdEVuZERhdGVdCiAgICAgIGxpZnRQZXJpb2RWZWMgPC0gZ2V0RGVjb21wVmVjW0RTID49IGxpZnRTdGFydCAmIERTIDw9IGxpZnRFbmQsIGMoIkRTIiwgZ2V0TGlmdE1lZGlhW21dKSwgd2l0aCA9IEZdCgogICAgICAjIyBzY2FsZSBkZWNvbXAKICAgICAgbW1tRGF5cyA8LSBucm93KGxpZnRQZXJpb2RWZWMpICogNwogICAgICBsaWZ0RGF5cyA8LSBhcy5pbnRlZ2VyKGxpZnRFbmQtIGxpZnRTdGFydCArIDEpCiAgICAgIHlfaGF0TGlmdCA8LSBzdW0odW5saXN0KGdldERlY29tcFZlY1ssIC0xXSkpICMgdG90YWwgcHJlZCBzYWxlcwogICAgICB4X2RlY29tcExpZnQgPC0gc3VtKGxpZnRQZXJpb2RWZWNbLDJdKQogICAgICB4X2RlY29tcExpZnRTY2FsZWQgPC0geF9kZWNvbXBMaWZ0IC8gbW1tRGF5cyAqIGxpZnREYXlzCgogICAgICAjIyBvdXRwdXQKICAgICAgbGlmdENvbGxlY3QyW1tsd11dIDwtIGRhdGEudGFibGUobGlmdE1lZGlhID0gZ2V0TGlmdE1lZGlhW21dICwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlmdFN0YXJ0ID0gbGlmdFN0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWZ0RW5kID0gbGlmdEVuZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlmdEFicyA9IHNldF9saWZ0W2xpZnRXaGljaFtsd10sIGxpZnRBYnNdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvbXBBYnNTY2FsZWQgPSB4X2RlY29tcExpZnRTY2FsZWQpCiAgICB9CiAgICBsaWZ0Q29sbGVjdFtbbV1dIDwtIHJiaW5kbGlzdChsaWZ0Q29sbGVjdDIpCiAgfQpgKSksbWR4KCJwIixudWxsLGBUaGUgbGFzdCBzdGVwIGlzIHRvIGNhbGN1bGF0ZSB0aGUgTUFQRS4gVGhpcyB3aWxsIGJlIHRoZSBrZXkgbWV0cmljIHRvIGRlZmluZSB0aGUgbW9kZWwgdGhhdCBpcyBjbG9zZXN0IHRvIGFjdHVhbCBpbmNyZW1lbnRhbCBzYWxlcyBkdXJpbmcgcGVyaW9kcyBmb3IgdGhlIGxpZnQgc3R1ZHkuIEl0IHdpbGwgdGhlcmVmb3JlIGFsbG93IHVzIHRvIG1ha2UgYSBkZWNpc2lvbiBhcyBwZXIgdGhlIGV4YW1wbGUgb24gdGhlIGAsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6IiNleGFtcGxlLXRhYmxlIn0pLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToiYSJ9LGB0YWJsZWApKSxgLmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgICAjIyBnZXQgbWFwZV9saWZ0CiAgbGlmdENvbGxlY3QgPC0gcmJpbmRsaXN0KGxpZnRDb2xsZWN0KVssIG1hcGVfbGlmdCA6PSBhYnMoKGRlY29tcEFic1NjYWxlZCAtIGxpZnRBYnMpIC8gbGlmdEFicykgKiAxMDBdCiAgcmV0dXJuKGxpZnRDb2xsZWN0KQp9CmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}