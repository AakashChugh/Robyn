{"remainingRequest":"/Users/leonelsentana/MMM_for_all/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/MMM_for_all/docs/doc8.md","dependencies":[{"path":"/Users/leonelsentana/MMM_for_all/docs/doc8.md","mtime":1597335191000},{"path":"/Users/leonelsentana/MMM_for_all/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-8-md-7c5.json","mtime":1597335485000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/cache-loader/dist/cjs.js","mtime":1597247035000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/babel-loader/lib/index.js","mtime":1597247034000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1597247056000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1597247054000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL2xlb25lbHNlbnRhbmEvTU1NX2Zvcl9hbGwvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXtpZDonZG9jOCcsdGl0bGU6J0NhbGlicmF0aW9uIHVzaW5nIGV4cGVyaW1lbnRhbCByZXN1bHRzJ307ZXhwb3J0IGNvbnN0IG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImRvYzgiLCJpZCI6ImRvYzgiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiQ2FsaWJyYXRpb24gdXNpbmcgZXhwZXJpbWVudGFsIHJlc3VsdHMiLCJkZXNjcmlwdGlvbiI6IkNhbGlicmF0aW9uIGNvbmNlcHQiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2RvYzgubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9kb2M4IiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL2VkaXQvbWFzdGVyL3dlYnNpdGUvZG9jcy9kb2M4Lm1kIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJBdXRvbWF0ZWQgaHlwZXJwYXJhbWV0ZXIgc2VsZWN0aW9uIGFuZCBvcHRpbWl6YXRpb24iLCJwZXJtYWxpbmsiOiIvZG9jcy9kb2M3In0sIm5leHQiOnsidGl0bGUiOiJPdXRwdXRzIGFuZCBkaWFnbm9zdGljcyIsInBlcm1hbGluayI6Ii9kb2NzL2RvYzkifX07LyogQGpzeCBtZHggKi9pbXBvcnQgdXNlQmFzZVVybCBmcm9tJ0Bkb2N1c2F1cnVzL3VzZUJhc2VVcmwnO2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOidDYWxpYnJhdGlvbiBjb25jZXB0JyxpZDonY2FsaWJyYXRpb24tY29uY2VwdCcsY2hpbGRyZW46W119LHt2YWx1ZTonQ2FsaWJyYXRpb24gaW4gdGhlIGNvZGUnLGlkOidjYWxpYnJhdGlvbi1pbi10aGUtY29kZScsY2hpbGRyZW46W119XTtjb25zdCBsYXlvdXRQcm9wcz17cmlnaHRUb2N9O2NvbnN0IE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7Y29tcG9uZW50cywuLi5wcm9wc30pe3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgiaDMiLHsiaWQiOiJjYWxpYnJhdGlvbi1jb25jZXB0In0sYENhbGlicmF0aW9uIGNvbmNlcHRgKSxtZHgoInAiLG51bGwsYEJ5IGFwcGx5aW5nIHJlc3VsdHMgZnJvbSByYW5kb21pemVkIGNvbnRyb2xsZWQtZXhwZXJpbWVudHMsIHlvdSBtYXkgaW1wcm92ZSB0aGUgYWNjdXJhY3kgb2YgeW91ciBtYXJrZXRpbmcgbWl4IG1vZGVscyBkcmFtYXRpY2FsbHkuIEl0IGlzIHJlY29tbWVuZGVkIHRvIHJ1biB0aGVzZSBvbiBhIHJlY3VycmVudCBiYXNpcyB0byBrZWVwIHRoZSBtb2RlbCBjYWxpYnJhdGVkIHBlcm1hbmVudGx5LiBJbiBnZW5lcmFsLCB3ZSB3YW50IHRvIGNvbXBhcmUgdGhlIGV4cGVyaW1lbnQgcmVzdWx0IHdpdGggdGhlIE1NTSBlc3RpbWF0aW9uIG9mIGEgbWFya2V0aW5nIGNoYW5uZWwuIENvbmNlcHR1YWxseSwgdGhpcyBtZXRob2QgaXMgbGlrZSBhIEJheWVzaWFuIG1ldGhvZCwgaW4gd2hpY2ggd2UgdXNlIGV4cGVyaW1lbnQgcmVzdWx0cyBhcyBhIHByaW9yIHRvIHNocmluayB0aGUgY29lZmZpY2llbnRzIG9mIG1lZGlhIHZhcmlhYmxlcy4gQSBnb29kIGV4YW1wbGUgb2YgdGhlc2UgdHlwZXMgb2YgZXhwZXJpbWVudHMgaXMgRmFjZWJvb2vigJlzIGNvbnZlcnNpb24gbGlmdCB0b29sIHdoaWNoIGNhbiBoZWxwIGd1aWRlIHRoZSBtb2RlbCB0b3dhcmRzIGEgc3BlY2lmaWMgcmFuZ2Ugb2YgaW5jcmVtZW50YWwgdmFsdWVzLmApLG1keCgiaW1nIix7YWx0OiJDYWxpYnJhdGlvbiBjaGFydCIsc3JjOnVzZUJhc2VVcmwoJy9zdGF0aWMvaW1nL2NhbGlicmF0aW9uMS5wbmcnKX0pLG1keCgicCIsbnVsbCxgRmlndXJlIGlsbHVzdHJhdGVzIHRoZSBjYWxpYnJhdGlvbiBwcm9jZXNzIGFib3ZlIGZvciBvbmUgTU1NIGNhbmRpZGF0ZSBtb2RlbC4KVGFibGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIG1vZGVsIHNlbGVjdGlvbiBvdXRwdXQgaW5jbHVkaW5nIEZCIGxpZnQgY2FsaWJyYXRpb24gZWxlbWVudC4gTW9kZWxlcnMgY2FuIHNlbGVjdCB0aGUgdG9wIG1vZGVscyB3aXRoIHJlbGF0aXZlbHkgc21hbGwgTUFQRSBtZXRyaWNzIGFzIHRoZSBjYW5kaWRhdGVzIGZvciB0aGUgZmluYWwgbW9kZWwuIEluIHRoaXMgZXhhbXBsZSwgd2Ugc3VnZ2VzdCBwaWNraW5nIG1vZGVsIHR3bywgYXMgaXQgaGFzIHRoZSBtaW5pbXVtIGAsbWR4KCJlbSIsbnVsbCxgTUFQRShjYWwsZmIpYCksYCBhbmQgaXRzIGAsbWR4KCJlbSIsbnVsbCxgTUFQRShob2xkb3V0KWApLGAgaXMgb25seSAwLjQlIG1vcmUgdGhhbiB0aGUgbWluaW11bSBvbmUuYCksbWR4KCJoNCIseyJpZCI6ImV4YW1wbGUtdGFibGUifSxgRXhhbXBsZSBUYWJsZWApLG1keCgicCIsbnVsbCxgU2FtcGxlIG91dHB1dCBvZiBtb2RlbCBzZWxlY3Rpb24gb2YgYSBNTU0gd2l0aCBvbmx5IHR3byBtZWRpYSBjaGFubmVscywgVFYgYW5kIFNvY2lhbGApLG1keCgiaW1nIix7YWx0OiJDYWxpYnJhdGlvbiB0YWJsZSIsc3JjOnVzZUJhc2VVcmwoJy9zdGF0aWMvaW1nL2NhbGlicmF0aW9uMi5wbmcnKX0pLG1keCgicCIsbnVsbCxgTm90ZSB0aGF0IGAsbWR4KCJlbSIsbnVsbCxgTUFQRShjYWwsZmIpYCksYCB3aWxsIGxpa2VseSB2YXJ5IG1vcmUgd2lkZWx5IHRoYW4gYCxtZHgoImVtIixudWxsLGBNQVBFKGhvbGRvdXQpYCksYCAuIEdpdmVuIHRoaXMsIGNhbGlicmF0aW9uIGNhbiBpbXByb3ZlIHBlcmZvcm1hbmNlIHdpdGhvdXQgc3Vic3RhbnRpYWxseSBzYWNyaWZpY2luZyBiYWNrdGVzdGluZyBwZXJmb3JtYW5jZS4KVGhpcyBjYWxpYnJhdGlvbiBtZXRob2QgY2FuIGJlIGFwcGxpZWQgdG8gb3RoZXIgbWVkaWEgY2hhbm5lbHMgd2hpY2ggcnVuIGV4cGVyaW1lbnRzLCB0aGUgbW9yZSBjaGFubmVscyB0aGF0IGFyZSBjYWxpYnJhdGVkLCB0aGUgbW9yZSBhY2N1cmF0ZSB0aGUgTU1NIG1vZGVsLiBgLG1keCgiZW0iLG51bGwsYFlvdSBtYXkgZmluZCB0aGUgY2FsaWJyYXRpb24gZnVuY3Rpb24gaW4gdGhlIOKAmGZ1bmMuUuKAmSBzY3JpcHQuYCksYCBgKSxtZHgoImgzIix7ImlkIjoiY2FsaWJyYXRpb24taW4tdGhlLWNvZGUifSxgQ2FsaWJyYXRpb24gaW4gdGhlIGNvZGVgKSxtZHgoInAiLG51bGwsYFNvLCBob3cgZG8gd2UgYXBwbHkgdGhpcyBpbiBvdXIgY29kZT9gKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBGaXJzdCwgd2UgY2hlY2sgaWYgbWVkaWEgY2hhbm5lbHMgdG8gYmUgY2FsaWJyYXRlZCBhY3R1YWxseSBoYXZlIGEgbWVkaWEgdmFyaWFibGUgY3JlYXRlZC4gYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEFmdGVyIHRoYXQsIHdlIGNvbGxlY3QgYWxsIGRpZmZlcmVudCBtZWRpYSB0byBiZSBjYWxpYnJhdGVkLiBDb25zZXF1ZW50bHksIHdlIGxvb3Agb3ZlciBlYWNoIGxpZnQgY2hhbm5lbCAoV2hlcmUgZm9yIGVhY2ggb2YgdGhlbSB3ZSBpdGVyYXRlIG92ZXIgYWxsIGRpZmZlcmVudCBzdHVkaWVzIGlmIG1vcmUgdGhhbiBvbmUsIGRldGVybWluaW5nIHRoZSBkYXRlIHJhbmdlIG9mIGVhY2ggc3R1ZHkpIGApLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LGBJbiBhZGRpdGlvbiwgd2UgY29udmVydCBkYXRhIGZyb20gd2Vla3MgdG8gZGF5cyAoUGxlYXNlIG5vdGUgdGhlICo3IGluIHRoZSBmb3JtdWxhIGZvciBtbW1EYXlzLCB0aGlzIGlzIGFzc3VtaW5nIHlvdSB3aWxsIHVzZSB3ZWVrbHkgZGF0YSBhcyBhIGJhc2lzIGZvciB5b3VyIG1vZGVsKS4gYCksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sYEZpbmFsbHksIGFuZCBvbmNlIGJvdGggbGlmdCBzdHVkeSBhbmQgTU1NIGRhdGVzIGFyZSBib3RoIGluIGRheXMsIHdlIHNjYWxlIHRoZSB0b3RhbCBkZWNvbXBvc2VkIG1vZGVsIHByZWRpY3RlZCBzYWxlcyBpbnRvIHRoZSBleGFjdCBudW1iZXIgb2YgZGF5cyB0aGUgbGlmdCBzdHVkeSBoYWQgdG8gYmUgY29tcGFyYWJsZSB3aXRoIHByZXZpb3VzbHkgdXBsb2FkZWQgbGlmdEFicyBudW1iZXIgdW5kZXIgdGhlIHNldF9saWZ0IHZhcmlhYmxlIChyZW1lbWJlciBsaWZ0QWJzIHZhbHVlcyBpbiBzZXRfbGlmdCB2YXJpYWJsZSBoYXZlIHRvIGJlIGFic29sdXRlIGFuZCBtZWFzdXJpbmcgdGhlIHNhbWUgbWV0cmljIGFzIHRoZSBtb2RlbCBkb2VzIGllLiB0b3RhbCBpbmNyZW1lbnRhbCBzYWxlcyB2cy4gbW9kZWwgcHJlZGljdGVkIHNhbGVzKWApKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYCMjIyMgRGVmaW5lIGxpZnQgY2FsaWJyYXRpb24gZnVuY3Rpb24KZi5jYWxpYnJhdGVMaWZ0IDwtIGZ1bmN0aW9uKGRlY29tcENvbGxlY3QsIHNldF9saWZ0KSB7CiAgCiAgY2hlY2tfc2V0X2xpZnQgPC0gYW55KHNhcHBseShzZXRfbGlmdCRjaGFubmVsLCBmdW5jdGlvbih4KSBhbnkoc3RyX2RldGVjdCh4LCBzZXRfbWVkaWFWYXJOYW1lKSkpPT1GKSAjY2hlY2sgaWYgYW55IGxpZnQgY2hhbm5lbCBkb2Vzbid0IGhhdmUgbWVkaWEgdmFyCiAgaWYgKGNoZWNrX3NldF9saWZ0KSB7c3RvcCgic2V0X2xpZnQgY2hhbm5lbHMgbXVzdCBoYXZlIG1lZGlhIHZhcmlhYmxlIil9CiAgIyMgcHJlcCBsaWZ0IGlucHV0ICAKICBnZXRMaWZ0TWVkaWEgPC0gdW5pcXVlKHNldF9saWZ0JGNoYW5uZWwpCiAgZ2V0RGVjb21wVmVjIDwtIGRlY29tcENvbGxlY3QkeERlY29tcFZlYwogIAogICMjIGxvb3AgYWxsIGxpZnQgaW5wdXQKICBsaWZ0Q29sbGVjdCA8LSBsaXN0KCkKICBmb3IgKG0gaW4gMTpsZW5ndGgoZ2V0TGlmdE1lZGlhKSkgeyAjIGxvb3AgcGVyIGxpZnQgY2hhbm5lbAogICAgCiAgICBsaWZ0V2hpY2ggPC0gc3RyX3doaWNoKHNldF9saWZ0JGNoYW5uZWwsIGdldExpZnRNZWRpYVttXSkKICAgIAogICAgbGlmdENvbGxlY3QyIDwtIGxpc3QoKQogICAgZm9yIChsdyBpbiAxOmxlbmd0aChsaWZ0V2hpY2gpKSB7ICMgbG9vcCBwZXIgbGlmdCB0ZXN0IHBlciBjaGFubmVsCiAgICAgIAogICAgICAjIyBnZXQgbGlmdCBwZXJpb2Qgc3Vic2V0CiAgICAgIGxpZnRTdGFydCA8LSBzZXRfbGlmdFtsaWZ0V2hpY2hbbHddLCBsaWZ0U3RhcnREYXRlXQogICAgICBsaWZ0RW5kIDwtIHNldF9saWZ0W2xpZnRXaGljaFtsd10sIGxpZnRFbmREYXRlXQogICAgICBsaWZ0UGVyaW9kVmVjIDwtIGdldERlY29tcFZlY1tEUyA+PSBsaWZ0U3RhcnQgJiBEUyA8PSBsaWZ0RW5kLCBjKCJEUyIsIGdldExpZnRNZWRpYVttXSksIHdpdGggPSBGXQogICAgICAKICAgICAgIyMgc2NhbGUgZGVjb21wCiAgICAgIG1tbURheXMgPC0gbnJvdyhsaWZ0UGVyaW9kVmVjKSAqIDcgCiAgICAgIGxpZnREYXlzIDwtIGFzLmludGVnZXIobGlmdEVuZC0gbGlmdFN0YXJ0ICsgMSkKICAgICAgeV9oYXRMaWZ0IDwtIHN1bSh1bmxpc3QoZ2V0RGVjb21wVmVjWywgLTFdKSkgIyB0b3RhbCBwcmVkIHNhbGVzCiAgICAgIHhfZGVjb21wTGlmdCA8LSBzdW0obGlmdFBlcmlvZFZlY1ssMl0pCiAgICAgIHhfZGVjb21wTGlmdFNjYWxlZCA8LSB4X2RlY29tcExpZnQgLyBtbW1EYXlzICogbGlmdERheXMKICAgICAgCiAgICAgICMjIG91dHB1dAogICAgICBsaWZ0Q29sbGVjdDJbW2x3XV0gPC0gZGF0YS50YWJsZShsaWZ0TWVkaWEgPSBnZXRMaWZ0TWVkaWFbbV0gLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWZ0U3RhcnQgPSBsaWZ0U3RhcnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZnRFbmQgPSBsaWZ0RW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWZ0QWJzID0gc2V0X2xpZnRbbGlmdFdoaWNoW2x3XSwgbGlmdEFic10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY29tcEFic1NjYWxlZCA9IHhfZGVjb21wTGlmdFNjYWxlZCkKICAgIH0KICAgIGxpZnRDb2xsZWN0W1ttXV0gPC0gcmJpbmRsaXN0KGxpZnRDb2xsZWN0MikKICB9CmApKSxtZHgoInAiLG51bGwsYFRoZSBsYXN0IHN0ZXAgaXMgdG8gY2FsY3VsYXRlIHRoZSBNQVBFLiBUaGlzIHdpbGwgYmUgdGhlIGtleSBtZXRyaWMgdG8gZGVmaW5lIHRoZSBtb2RlbCB0aGF0IGlzIGNsb3Nlc3QgdG8gYWN0dWFsIGluY3JlbWVudGFsIHNhbGVzIGR1cmluZyBwZXJpb2RzIGZvciB0aGUgbGlmdCBzdHVkeS4gSXQgd2lsbCB0aGVyZWZvcmUgYWxsb3cgdXMgdG8gbWFrZSBhIGRlY2lzaW9uIGFzIHBlciB0aGUgZXhhbXBsZSBvbiB0aGUgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiI2V4YW1wbGUtdGFibGUifSksbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJhIn0sYHRhYmxlYCkpLGAuYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAgICMjIGdldCBtYXBlX2xpZnQKICBsaWZ0Q29sbGVjdCA8LSByYmluZGxpc3QobGlmdENvbGxlY3QpWywgbWFwZV9saWZ0IDo9IGFicygoZGVjb21wQWJzU2NhbGVkIC0gbGlmdEFicykgLyBsaWZ0QWJzKSAqIDEwMF0KICByZXR1cm4obGlmdENvbGxlY3QpIAp9CmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/Users/leonelsentana/MMM_for_all/docs/doc8.md"],"names":["React","mdx","frontMatter","id","title","metadata","useBaseUrl","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'doc8',\n\ttitle: 'Calibration using experimental results'\n};\nexport const metadata = {\n  \"unversionedId\": \"doc8\",\n  \"id\": \"doc8\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Calibration using experimental results\",\n  \"description\": \"Calibration concept\",\n  \"source\": \"@site/docs/doc8.md\",\n  \"permalink\": \"/docs/doc8\",\n  \"editUrl\": \"https://github.com/facebook/docusaurus/edit/master/website/docs/doc8.md\",\n  \"sidebar\": \"someSidebar\",\n  \"previous\": {\n    \"title\": \"Automated hyperparameter selection and optimization\",\n    \"permalink\": \"/docs/doc7\"\n  },\n  \"next\": {\n    \"title\": \"Outputs and diagnostics\",\n    \"permalink\": \"/docs/doc9\"\n  }\n};\n  /* @jsx mdx */\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nexport const rightToc = [{\n  value: 'Calibration concept',\n  id: 'calibration-concept',\n  children: []\n}, {\n  value: 'Calibration in the code',\n  id: 'calibration-in-the-code',\n  children: []\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"calibration-concept\"\n    }}>{`Calibration concept`}</h3>\n    <p>{`By applying results from randomized controlled-experiments, you may improve the accuracy of your marketing mix models dramatically. It is recommended to run these on a recurrent basis to keep the model calibrated permanently. In general, we want to compare the experiment result with the MMM estimation of a marketing channel. Conceptually, this method is like a Bayesian method, in which we use experiment results as a prior to shrink the coefficients of media variables. A good example of these types of experiments is Facebook’s conversion lift tool which can help guide the model towards a specific range of incremental values.`}</p>\n    <img alt=\"Calibration chart\" src={useBaseUrl('/static/img/calibration1.png')} />\n    <p>{`Figure illustrates the calibration process above for one MMM candidate model.\nTable below illustrates the model selection output including FB lift calibration element. Modelers can select the top models with relatively small MAPE metrics as the candidates for the final model. In this example, we suggest picking model two, as it has the minimum `}<em>{`MAPE(cal,fb)`}</em>{` and its `}<em>{`MAPE(holdout)`}</em>{` is only 0.4% more than the minimum one.`}</p>\n    <h4 {...{\n      \"id\": \"example-table\"\n    }}>{`Example Table`}</h4>\n    <p>{`Sample output of model selection of a MMM with only two media channels, TV and Social`}</p>\n    <img alt=\"Calibration table\" src={useBaseUrl('/static/img/calibration2.png')} />\n    <p>{`Note that `}<em>{`MAPE(cal,fb)`}</em>{` will likely vary more widely than `}<em>{`MAPE(holdout)`}</em>{` . Given this, calibration can improve performance without substantially sacrificing backtesting performance.\nThis calibration method can be applied to other media channels which run experiments, the more channels that are calibrated, the more accurate the MMM model. `}<em>{`You may find the calibration function in the ‘func.R’ script.`}</em>{` `}</p>\n    <h3 {...{\n      \"id\": \"calibration-in-the-code\"\n    }}>{`Calibration in the code`}</h3>\n    <p>{`So, how do we apply this in our code?`}</p>\n    <ol>\n      <li parentName=\"ol\">{`First, we check if media channels to be calibrated actually have a media variable created. `}</li>\n      <li parentName=\"ol\">{`After that, we collect all different media to be calibrated. Consequently, we loop over each lift channel (Where for each of them we iterate over all different studies if more than one, determining the date range of each study) `}</li>\n      <li parentName=\"ol\">{`In addition, we convert data from weeks to days (Please note the *7 in the formula for mmmDays, this is assuming you will use weekly data as a basis for your model). `}</li>\n      <li parentName=\"ol\">{`Finally, and once both lift study and MMM dates are both in days, we scale the total decomposed model predicted sales into the exact number of days the lift study had to be comparable with previously uploaded liftAbs number under the set_lift variable (remember liftAbs values in set_lift variable have to be absolute and measuring the same metric as the model does ie. total incremental sales vs. model predicted sales)`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`#### Define lift calibration function\nf.calibrateLift <- function(decompCollect, set_lift) {\n  \n  check_set_lift <- any(sapply(set_lift$channel, function(x) any(str_detect(x, set_mediaVarName)))==F) #check if any lift channel doesn't have media var\n  if (check_set_lift) {stop(\"set_lift channels must have media variable\")}\n  ## prep lift input  \n  getLiftMedia <- unique(set_lift$channel)\n  getDecompVec <- decompCollect$xDecompVec\n  \n  ## loop all lift input\n  liftCollect <- list()\n  for (m in 1:length(getLiftMedia)) { # loop per lift channel\n    \n    liftWhich <- str_which(set_lift$channel, getLiftMedia[m])\n    \n    liftCollect2 <- list()\n    for (lw in 1:length(liftWhich)) { # loop per lift test per channel\n      \n      ## get lift period subset\n      liftStart <- set_lift[liftWhich[lw], liftStartDate]\n      liftEnd <- set_lift[liftWhich[lw], liftEndDate]\n      liftPeriodVec <- getDecompVec[DS >= liftStart & DS <= liftEnd, c(\"DS\", getLiftMedia[m]), with = F]\n      \n      ## scale decomp\n      mmmDays <- nrow(liftPeriodVec) * 7 \n      liftDays <- as.integer(liftEnd- liftStart + 1)\n      y_hatLift <- sum(unlist(getDecompVec[, -1])) # total pred sales\n      x_decompLift <- sum(liftPeriodVec[,2])\n      x_decompLiftScaled <- x_decompLift / mmmDays * liftDays\n      \n      ## output\n      liftCollect2[[lw]] <- data.table(liftMedia = getLiftMedia[m] ,\n                                       liftStart = liftStart,\n                                       liftEnd = liftEnd,\n                                       liftAbs = set_lift[liftWhich[lw], liftAbs],\n                                       decompAbsScaled = x_decompLiftScaled)\n    }\n    liftCollect[[m]] <- rbindlist(liftCollect2)\n  }\n`}</code></pre>\n    <p>{`The last step is to calculate the MAPE. This will be the key metric to define the model that is closest to actual incremental sales during periods for the lift study. It will therefore allow us to make a decision as per the example on the `}<a parentName=\"p\" {...{\n        \"href\": \"#example-table\"\n      }}><strong parentName=\"a\">{`table`}</strong></a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`  ## get mape_lift\n  liftCollect <- rbindlist(liftCollect)[, mape_lift := abs((decompAbsScaled - liftAbs) / liftAbs) * 100]\n  return(liftCollect) \n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}