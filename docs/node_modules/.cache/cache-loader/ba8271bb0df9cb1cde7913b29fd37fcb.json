{"remainingRequest":"/Users/leonelsentana/MMM_for_all/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/leonelsentana/MMM_for_all/docs/doc3.md","dependencies":[{"path":"/Users/leonelsentana/MMM_for_all/docs/doc3.md","mtime":1597254283000},{"path":"/Users/leonelsentana/MMM_for_all/.docusaurus/docusaurus-plugin-content-docs/site-docs-doc-3-md-616.json","mtime":1597336002000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/cache-loader/dist/cjs.js","mtime":1597247035000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/babel-loader/lib/index.js","mtime":1597247034000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1597247056000},{"path":"/Users/leonelsentana/MMM_for_all/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1597247054000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/leonelsentana/MMM_for_all/docs/doc3.md"],"names":["React","mdx","frontMatter","id","title","metadata","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'doc3',\n\ttitle: 'Quick Start'\n};\nexport const metadata = {\n  \"unversionedId\": \"doc3\",\n  \"id\": \"doc3\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Quick Start\",\n  \"description\": \"Once you have loaded all scripts, we will focus on the ‘.exec.R’ one to quickly start testing the code and understanding how to use it. Below you will find the steps to follow:\",\n  \"source\": \"@site/docs/doc3.md\",\n  \"permalink\": \"/docs/doc3\",\n  \"editUrl\": \"https://github.com/facebook/docusaurus/edit/master/website/docs/doc3.md\",\n  \"sidebar\": \"someSidebar\",\n  \"previous\": {\n    \"title\": \"Installation\",\n    \"permalink\": \"/docs/\"\n  },\n  \"next\": {\n    \"title\": \"Ridge Regression\",\n    \"permalink\": \"/docs/doc4\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'Load packages',\n  id: 'load-packages',\n  children: []\n}, {\n  value: 'Load data',\n  id: 'load-data',\n  children: []\n}, {\n  value: 'Set global parameters',\n  id: 'set-global-parameters',\n  children: []\n}, {\n  value: 'Set cores for parallel computing',\n  id: 'set-cores-for-parallel-computing',\n  children: []\n}, {\n  value: 'Set model core features',\n  id: 'set-model-core-features',\n  children: []\n}, {\n  value: 'Set hyperparameters bounds',\n  id: 'set-hyperparameters-bounds',\n  children: []\n}, {\n  value: 'Set model train and test size',\n  id: 'set-model-train-and-test-size',\n  children: []\n}, {\n  value: 'Define experimental results and calibration',\n  id: 'define-experimental-results-and-calibration',\n  children: []\n}, {\n  value: 'Loading scripts and running the model',\n  id: 'loading-scripts-and-running-the-model',\n  children: []\n}, {\n  value: 'Plotting results',\n  id: 'plotting-results',\n  children: []\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p><strong parentName=\"p\">{`Once you have loaded all scripts, we will focus on the ‘.exec.R’ one to quickly start testing the code and understanding how to use it. Below you will find the steps to follow:`}</strong>{`  `}</p>\n    <h2 {...{\n      \"id\": \"load-packages\"\n    }}>{`Load packages`}</h2>\n    <p>{`You will utilize several open source packages to run this code, please install and load all libraries before running it. You will find several packages related to working with data tables, loops, parallel computing and plotting results, however the package for the core regression process is library(glmnet) from which the ridge regression will execute. `}</p>\n    <h4 {...{\n      \"id\": \"please-make-sure-to-install-all-libraries-before-running-the-scripts\"\n    }}>{`Please make sure to install all libraries before running the scripts`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`library(glmnet)\n...\n...\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"load-data\"\n    }}>{`Load data`}</h2>\n    <p>{`First you will load the data and create the outcome variable. As in any MMM, this is a dataframe with a minimum set of columns ds and y, containing the date and numeric value respectively. You may also want to add regressors variables to account for different marketing channels and their investment, impressions or any other metric to determine the size and impact of marketing campaigns.\nPlease have in mind that this automated file reading solution requires that you are using RStudio and that it will set your working directory as the source file location in Rstudio.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### load data\nscript_path <- str_sub(rstudioapi::getActiveDocumentContext()$path, start = 1, end = max(unlist(str_locate_all(rstudioapi::getActiveDocumentContext()$path, \"/\"))))\ndt_input <- fread(paste0(script_path,'de_simulated_data.csv'))\nholidays <- fread(paste0(script_path,'generated_holidays.csv')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-global-parameters\"\n    }}>{`Set global parameters`}</h2>\n    <p>{`The next step is to define the variables you will be working with from the previously uploaded data. There are different types of variables, as mentioned above, the main three ones are dependent (set_depVarName), date (set_dateVarName) and media volume (set_mediaVarName). `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### define variables\nset_dateVarName <- c(\"DATE\") # date must be format \"2020-01-01\"\nset_depVarName <- c(\"revenue\") # there should be only one dependent variable\nset_mediaVarName <- c(\"tv_S\", \"facebook_I\" ) # c(\"revenue\", \"tv_S\", \"ooh_S\", \"print_S\", \"facebook_I\"    , \"search_clicks_P\", \"search_imps_P\", \"search_S\", \"competitor_sales_B\") we recommend to use media pressure metrics like impressions, GRP etc for the model. If not applicable, use spend instead\n`}</code></pre>\n    <p>{`Moreover, You will have to define which base variables (set_baseVarName) provided by the code or that you own to use, we recommend at least to keep the trend and holidays in the model.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_baseVarName <- c(\"TREND\",\"HOLIDAYS\",\"SEASONAL\", \"competitor_sales_B\") \n##### \"TREND\", \"HOLIDAYS\",\"SEASONAL\", \"WEEKDAY\", \"HOURLY\" are provided by the code. \n`}</code></pre>\n    <p>{`Finally, you will find two variables for sign control, these will control for constrained variables that theoretically have to be greater than zero (positive), lower than zero (negative), or can take just any coefficient values (default).You will see there are media and base variables sign control so you will have to define them on separate variables:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mediaVarSign <- c(\"positive\", \"positive\") # c(\"default\", \"positive\", and \"negative\"), control the signs of coefficients for media variables\nset_baseVarSign <- c(\"default\", \"default\", \"default\", \"negative\") # c(\"default\", \"positive\", and \"negative\"), control the signs of coefficients for base variables\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-cores-for-parallel-computing\"\n    }}>{`Set cores for parallel computing`}</h2>\n    <p>{`Next we will define the amount of cores to allocate to the overall process. Please bear in mind to always leave one or two cores out of the total number of cores your machine has to prevent your OS from crashing.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### set cores for parallel computing\nregisterDoSEQ(); detectCores()\nsetCores <- 6\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-model-core-features\"\n    }}>{`Set model core features`}</h2>\n    <p>{`The following step is crucial, this is where you will define if you will be using weibull or geometric adstock functions (Please refer to the variables transformation section within this documentation). You will also need to define the number of iterations for the algorithm to loop and find optimal hyperparameter values.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### set model core features\nadstock <- \"geometric\" # geometric or weibull\niterN <- 1000 # \"rs\" iteration is theoretically unlimited.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-hyperparameters-bounds\"\n    }}>{`Set hyperparameters bounds`}</h2>\n    <p>{`This is an optional step as there is absolutely no need to change it. You may edit bounds in case you already found optimal ranges for parameters after several iterations. We recommend you leave it as it is at the beginning.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### set hyperparameters\nno need to change\nhypBound <- list(thetas = c(0, 0.9999) ,shapes = c(0, 5) ,scales = c(0.0001, 0.9999), \n                 alphas = c(0, 5) ,gammas = c(0.0001, 0.9999) ,lambdas = c(0, 1))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set-model-train-and-test-size\"\n    }}>{`Set model train and test size`}</h2>\n    <p>{`On this step you will define the percentage of your data you will be saving to test the model once it has been trained and validated. We recommend assigning 80% for training purposes.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`set_mod_train_size <- 0.8 # 0.8 means taking 80% of data to train and 20% to test the model\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"define-experimental-results-and-calibration\"\n    }}>{`Define experimental results and calibration`}</h2>\n    <p>{`The last step in variable definition is to add incremental studies data in case you have information available, such as conversion lift data for Facebook. You will need to first define calibrateLift <- T to include calibration in your model. Consequently, you will need to define which channels you want to define certain incremental values for as well as, start, end and incremental absolute values (liftAbs) from the studies. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`calibrateLift <- F\nset_lift <- data.table(channel = c(\"facebook_I\",  \"tv_S\", \"facebook_I\"),\n                       liftStartDate = as.Date(c(\"2018-05-01\", \"2017-11-27\", \"2018-07-01\")),\n                       liftEndDate = as.Date(c(\"2018-06-10\", \"2017-12-03\", \"2018-07-20\")),\n                       liftAbs = c(70000000, 5000000, 50000000))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"loading-scripts-and-running-the-model\"\n    }}>{`Loading scripts and running the model`}</h2>\n    <p>{`Once you have defined all the variables from previous steps, you will need to finally execute the ‘.func.R’ and ’.plot.R’ scripts in order to run the model. Therefore you will need to load the scripts first, run the models and print results as per below: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### load scripts\nsource(paste(script_path, \"fb_nextgen_mmm_v19.func.R\", sep=\"\"))\nsource(paste(script_path, \"fb_nextgen_mmm_v19.bayes.R\", sep=\"\"))\nsource(paste(script_path, \"fb_nextgen_mmm_v19.plot.R\", sep=\"\"))\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`#### Run model scripts\nif (hyperparamOptim == \"rs\") {\n  sysTimeRS <- system.time({\n    resultRS <- f.mmm(hyperparameters,\n                      iterRS = iterN,\n                      hyperparamOptim = \"rs\",\n                      setCores = setCores\n    )})\n  \n  #print(head(resultRS$resultCollect$resultHypParam, 15))\n  bestParRS <- f.getBestParRS(resultRS, calibrateLift)\n  best.resultRS <- f.mmm(bestParRS, hyperparamOptim = \"rs\")\n  \n} }\nregisterDoSEQ(); getDoParWorkers()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"plotting-results\"\n    }}>{`Plotting results`}</h2>\n    <p>{`Once all iterations are finished you will proceed to plot different charts that will help you assess the models accuracy, business contribution for marketing channels and baseline variables.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#### insert TRUE into plot functions to plot\nf.plotHyperSamp(F) # plot latin hypercube hyperparameter sampling balance\nf.plotTrendSeason(F) # plot prophet trend, season and holiday decomposition\nf.plotBestMod(T) # plot best model with 5 plots: media adstocking, sales decomp, actual vs fitted over time, sales decomp area plot & channel response curve\nf.plotMAPE.RS(F) # plot RS MAPE convergence, only for random search\nf.plotBestModResid(F) # plot best model diagnostics: residual vs fitted, QQ plot and residual vs. actual\nf.plotHypConverge(F) # plot hyperparameter vs MAPE convergence\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}